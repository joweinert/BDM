import os
import duckdb
import boto3
import urllib.parse

BUCKET = os.environ["EXPLOITATION_ZONE_BUCKET"]
ENDPOINT = os.environ["MINIO_ENDPOINT"]
ACCESS = os.environ["MINIO_ROOT_USER"]
SECRET = os.environ["MINIO_ROOT_PASSWORD"]

HOST = urllib.parse.urlparse(ENDPOINT).netloc

s3 = boto3.client(
    "s3",
    endpoint_url=ENDPOINT,
    aws_access_key_id=ACCESS,
    aws_secret_access_key=SECRET,
)

S3_SETTINGS = f"""
SET s3_endpoint='{HOST}';
SET s3_access_key_id='{ACCESS}';
SET s3_secret_access_key='{SECRET}';
SET s3_url_style='path';
SET s3_use_ssl=false;
"""


def _connect(db_file: str) -> duckdb.DuckDBPyConnection:
    con = duckdb.connect(db_file)
    con.execute("INSTALL httpfs; LOAD httpfs;")
    con.sql(S3_SETTINGS)
    return con


def _ingest_table(con: duckdb.DuckDBPyConnection, name: str) -> None:
    con.sql(
        f"""
        CREATE OR REPLACE TABLE {name} AS
        SELECT * FROM parquet_scan(
            's3://{BUCKET}/_staging_parquet/{name}/*.parquet',
            filename=false, hive_partitioning=true
        );
        """
    )


def build_base_snapshot() -> None:
    paginator = s3.get_paginator("list_objects_v2")
    pages = paginator.paginate(Bucket=BUCKET, Prefix="_staging_parquet/", Delimiter="/")

    folders = []
    for page in pages:
        for prefix in page.get("CommonPrefixes", []):
            folders.append(prefix["Prefix"].rstrip("/").split("/")[-1])

    db_file = "/tmp/exploitation.duckdb"
    con = _connect(db_file)
    for name in folders:
        try:
            _ingest_table(con, name)
        except:
            print(f"⚠️ Failed to ingest table {name}. It may not exist or be empty.")
    con.sql("CHECKPOINT")
    con.close()
    s3.upload_file(db_file, BUCKET, "exploitation.duckdb")


def build_risk_mgmt() -> None:
    db_file = "/tmp/risk_mgmt.duckdb"
    con = _connect(db_file)
    for tbl in [
        "ops_db_user_transactions",
        "ops_db_user_profiles",
        "ops_db_kyc_metadata",
    ]:
        try:
            _ingest_table(con, tbl)
        except:
            print(f"⚠️ Failed to ingest table {tbl}. It may not exist or be empty.")
    con.sql(
        """
        CREATE OR REPLACE TABLE kpi_monthly_tx AS
        SELECT user_id,
               strftime('%Y-%m', timestamp) AS month,
               SUM(amount) AS total_amount,
               COUNT(*) AS tx_count,
               AVG(login_attempts) AS avg_login_attempts
        FROM ops_db_user_transactions
        GROUP BY user_id, month
        ORDER BY user_id, month;
        """
    )
    con.sql(
        """
        CREATE OR REPLACE TABLE kpi_kyc_status AS
        SELECT status, COUNT(*) AS cnt
        FROM ops_db_kyc_metadata
        GROUP BY status;
        """
    )
    con.sql("CHECKPOINT")
    con.close()
    s3.upload_file(db_file, BUCKET, "datamarts/risk_mgmt.duckdb")


def build_market_intel() -> None:
    db_file = "/tmp/market_intel.duckdb"
    con = _connect(db_file)
    for tbl in [
        "eodhd_financial_news",
        "imf_indicators",
        ]:
        try:
            _ingest_table(con, tbl)
        except:
            print(f"⚠️ Failed to ingest table {tbl}. It may not exist or be empty.")
    con.sql(
        """
        CREATE OR REPLACE TABLE kpi_imf_growth AS
        SELECT indicator,
               year,
               value - lag(value) OVER (PARTITION BY indicator ORDER BY year) AS yoy_change
        FROM imf_indicators
        ORDER BY indicator, year;
        """
    )
    con.sql("CHECKPOINT")
    con.close()
    s3.upload_file(db_file, BUCKET, "datamarts/market_intel.duckdb")


def build_finance_reporting() -> None:
    db_file = "/tmp/finance_reporting.duckdb"
    con = _connect(db_file)
    for tbl in [
        "finnhub_financial_report",
        "ops_db_user_transactions",   
        ]:
        try:
            _ingest_table(con, tbl)
        except:
            print(f"⚠️ Failed to ingest table {tbl}. It may not exist or be empty.")
    con.sql(
        """
        CREATE OR REPLACE TABLE kpi_tx_volume_currency AS
        SELECT currency, SUM(amount) AS total_amount
        FROM ops_db_user_transactions
        GROUP BY currency;
        """
    )
    con.sql(
        """
        CREATE OR REPLACE TABLE kpi_financial_totals AS
        SELECT symbol, year, quarter, statement,
               SUM(value) AS total_value
        FROM finnhub_financial_report
        GROUP BY symbol, year, quarter, statement
        ORDER BY symbol, year, quarter, statement;
        """
    )
    con.sql("CHECKPOINT")
    con.close()
    s3.upload_file(db_file, BUCKET, "datamarts/finance_reporting.duckdb")


if __name__ == "__main__":
    build_base_snapshot()
    build_risk_mgmt()
    build_market_intel()
    build_finance_reporting()